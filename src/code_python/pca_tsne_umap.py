# -*- coding: utf-8 -*-
"""pca_tsne_umap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BKflMhLMrf-c-hknP0zxKsUHDZIvHI9y
"""

import numpy as np
import glob
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from scipy import *
sns.set()

train_values = np.empty(shape=[0, 222])
test_values = np.empty(shape=[0, 222])

train_sampled_all = glob.glob('./drive/MyDrive/compsci/train_sampled_all_220.csv')
# test_sampled_all = glob.glob('./drive/MyDrive/compsci/test_sampled_all_centered_220.csv')
test_unsampled_all = glob.glob('./drive/MyDrive/compsci/test_unsampled_all_220.csv')

for j in train_sampled_all:
    print('Loading ', j)
    csvrows = np.loadtxt(j, delimiter=',')
    train_values = np.append(train_values, csvrows, axis=0)
    
# for j in test_all:
#     print('Loading ', j)
#     csvrows = np.loadtxt(j, delimiter=',')
#     test_values = np.append(test_values, csvrows, axis=0)

for j in test_unsampled_all:
    print('Loading ', j)
    csvrows = np.loadtxt(j, delimiter=',')
    test_values = np.append(test_values, csvrows, axis=0)
    
print(train_values.shape)
print(test_values.shape)

X_train = train_values[:,:-2]
X_test = test_values[:,:-2]

y_train = train_values[:,-2]
y_test = test_values[:,-2]

y_train_gc = (y_train - y_train.min())/(y_train.max()-y_train.min())*(9-1)
y_test_gc = (y_test - y_test.min())/(y_test.max()-y_test.min())*(9-1)

X_test_noN = np.where(test_values[:,-2]==1.0)[0]
print(X_test_noN.shape)
X_test = np.delete(X_test, X_test_noN,0)
print(X_test.shape)

y_test_noN = np.where(test_values[:,-2]==1.0)[0]
print(y_test_noN.shape)
y_test = np.delete(y_test, y_test_noN,0)
print(y_test.shape)

N_vals = np.where(test_values[:,-2]==1)[0]
new_test = np.delete(test_values,N_vals[:27000],axis=0)
print(new_test.shape)

from sklearn.decomposition import PCA
x_pca = PCA(n_components=50,random_state=42).fit_transform(new_test[:,:-2])

plt.figure(figsize=(8,8))

categories=['N','L','R','V','A','F','f','/']
scatter = plt.scatter(x_pca[:,0],x_pca[:,1],c=new_test[:,-2], cmap='inferno')
plt.legend(title="Classes",loc='upper right',*scatter.legend_elements())
plt.title('PCA')

from sklearn.manifold import TSNE
x_tsne = TSNE(n_components=2,random_state=42,perplexity=10, verbose=2).fit_transform(x_pca)

plt.figure(figsize=(8,8))

categories=['N','L','R','V','A','F','f','/']
scatter = plt.scatter(x_tsne[:,0],x_tsne[:,1],c=new_test[:,-2], cmap='inferno')
plt.legend(title="Classes",loc='upper right',*scatter.legend_elements())
plt.title('PCA and TSNE')

import umap
reducer = umap.UMAP(n_components=2, random_state=42, n_neighbors=10, a = 0.5, b = 1.2)
embedding = reducer.fit_transform(x_pca)
embedding.shape

plt.figure(figsize=(8,8))

plt.scatter(reducer.embedding_[:, 0], reducer.embedding_[:, 1], c=new_test[:,-2], cmap='inferno')
plt.legend(title="Classes",loc='upper right',*scatter.legend_elements())
plt.title('PCA and UMAP')

